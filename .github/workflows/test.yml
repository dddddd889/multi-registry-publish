name: Test测试publish功能

on:
  workflow_call:
    inputs:
      dockerComposeFile:
        required: true
        type: string

jobs:
  test-publish-in-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # node-version: [14, 16, 18, 20, 22] # 指定要测试的 Node.js 版本
        node-version: [22] # 指定要测试的 Node.js 版本

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Register Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and start containers using Docker Compose
        run: |
          sudo chown -R 10001:10001 ./docker-file/storage1
          sudo chown -R 10001:10001 ./docker-file/storage2
          docker-compose -f ${{ inputs.dockerComposeFile }} up -d --build --force-recreate  # 构建并启动容器，`-d` 表示在后台运行

      - name: Install wait-for-it
        run: sudo apt-get install -y wait-for-it

      - name: Wait for services to be ready
        run: |
          # 等待容器完全启动，可以根据你的容器服务进行调整
          wait-for-it  localhost:4877 -t 60
          wait-for-it  localhost:4878 -t 60

      - uses: ./.github/actions/runPub
        with:
          cdDir: ./demo/lib1
          type: cjs

      # - uses: ./.github/actions/runPub
      #   with:
      #     cdDir: ./demo/lib2
      #     type: esm
      # - name: Run tests request Docker container With cjs
      #   run: |
      #     cd ./demo/lib1
      #     cp ./.npmrc ~/.npmrc
      #     ls -al ~
      #     cat ~/.npmrc
      #     docker ps -a
      #     node -e "console.log(process.cwd())" & npm run pub
      #     cd ./demo/lib2
      #     node -e "console.log(process.cwd())" & npm run pub

      # - name: Docker compose log with cjs
      #   if: always()  # This ensures it runs regardless of success or failure
      #   run: |
      #     docker ps --filter "name=verdaccio" --format "{{.ID}}" | awk '{if ($1) print $1}' | xargs -I {} docker logs {}

      # - name: Run tests request Docker container With esm
      #   run: |
      #     cd ./demo/lib2
      #     cp ./.npmrc ~/.npmrc
      #     ls -al ~
      #     cat ~/.npmrc
      #     docker ps -a
      #     node -e "console.log(process.cwd())" & npm run pub

      # - name: Docker compose log with esm
      #   if: always()  # This ensures it runs regardless of success or failure
      #   run: |
      #     docker ps --filter "name=verdaccio" --format "{{.ID}}" | awk '{if ($1) print $1}' | xargs -I {} docker logs {}

      - name: Tear down containers
        run: |
          docker-compose -f ${{ inputs.dockerComposeFile }} down # 停止并清理容器
